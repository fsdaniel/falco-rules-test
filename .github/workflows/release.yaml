name: Run Falco with Custom Rules and Release Rulesfile

on:
  push:
    branches:
      - main  # Adjust this to the branch you want to trigger the workflow

jobs:
  run-falco:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Set up Docker
      #   uses: docker/setup-action@v2
      #   with:
      #     registry-url: https://ghcr.io
      #     registry-username: ${{ github.actor }}
      #     registry-password: ${{ secrets.CR_PAT }}

      - name: Validate rules
        id: run-falco
        run: |
          docker run -e FALCO_BPF_PROBE="" -v ${{ github.workspace }}/global_falco_rules.yaml:/etc/falco/global_falco_rules.yaml -v ${{ github.workspace }}/custom_falco_rules.local.yaml:/etc/falco/custom_falco_rules.local.yaml -v ${{ github.workspace }}/falco-config.yaml:/etc/falco/falco.yaml -e SYSDIG_SKIP_LOAD=1 falcosecurity/falco-no-driver:0.35.1 /usr/bin/falco --disable-source=syscall --validate /etc/falco/global_falco_rules.yaml --validate /etc/falco/custom_falco_rules.local.yaml
          # DOCKER_OUTPUT=$(docker run -e FALCO_BPF_PROBE="" -v ${{ github.workspace }}/global_falco_rules.yaml:/etc/falco/global_falco_rules.yaml -v ${{ github.workspace }}/custom_falco_rules.local.yaml:/etc/falco/custom_falco_rules.local.yaml -v ${{ github.workspace }}/falco-config.yaml:/etc/falco/falco.yaml -e SYSDIG_SKIP_LOAD=1 falcosecurity/falco-no-driver:0.35.1 /usr/bin/falco --disable-source=syscall --validate /etc/falco/global_falco_rules.yaml --validate /etc/falco/custom_falco_rules.local.yaml 2>&1)
          # echo "$DOCKER_OUTPUT"


      - name: Check Falco exit code
        run: |
          if [ ${{ steps.run-falco.outcome }} == "failure" ]; then
            echo "Falco execution failed."
            exit 1
          fi

  Release-Rulesfile:
    needs: run-falco
    runs-on: ubuntu-latest
    if: success()  # Only run if the "run-falco" job succeeds

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      packages: write

    env:
      # Only one ruleset file for our demo
      RULESET_FILE: custom_falco_rules.local.yaml
      GLOBALS_FILE: global_falco_rules.yaml
      # Used to set up Auth and OCI artifact location
      OCI_REGISTRY: ghcr.io
      # Assuming we are in the main branch, our OCI artifact will
      # look something like ghcr.io/user/repo/custom-rules:main
      OCI_ARTIFACT_NAME: custom-rules
      OCI_ARTIFACT_VERSION: ${{ github.ref_name }}

    steps:

      - name: Checkout Falcoctl Repo
        uses: actions/checkout@v3
        with:
          repository: falcosecurity/falcoctl
          ref: main
          path: tools/falcoctl

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'
          cache-dependency-path: tools/falcoctl/go.sum

      - name: Build falcoctl
        run: make
        working-directory: tools/falcoctl

      - name: Checkout Rules Repo
        uses: actions/checkout@v3
        with:
          path: rules
      
      - name: Upload global OCI artifacts to GitHub packages
        run: |
             tools/falcoctl/falcoctl registry push \
             --config /dev/null \
             --type rulesfile \
             --version ${OCI_ARTIFACT_VERSION} \
             ${OCI_REGISTRY}/${GITHUB_REPOSITORY}/global-rules:${OCI_ARTIFACT_VERSION} \
             rules/${GLOBALS_FILE}
        env:
          FALCOCTL_REGISTRY_AUTH_BASIC: ${{ env.OCI_REGISTRY }},${{ github.repository_owner }},${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload OCI artifacts to GitHub packages
        run: |
             tools/falcoctl/falcoctl registry push \
             --config /dev/null \
             --type rulesfile \
             --version ${OCI_ARTIFACT_VERSION} \
             ${OCI_REGISTRY}/${GITHUB_REPOSITORY}/${OCI_ARTIFACT_NAME}:${OCI_ARTIFACT_VERSION} \
             rules/${RULESET_FILE}
        env:
          FALCOCTL_REGISTRY_AUTH_BASIC: ${{ env.OCI_REGISTRY }},${{ github.repository_owner }},${{ secrets.GITHUB_TOKEN }}
